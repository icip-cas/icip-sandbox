{"content": "Alice and Johnny are playing a simple guessing game. Johnny picks an arbitrary positive integer n (1 ≤ n ≤ 10^9) and gives Alice exactly k hints about the value of n. It is Alice's task to guess n, based on the received hints. \n\nAlice often has a serious problem guessing the value of n, and she's beginning to suspect that Johnny occasionally cheats, that is, gives her incorrect hints. \nAfter the last game, they had the following little conversation:\n\n\n[Alice] Johnny, you keep cheating!\n[Johnny] Indeed? You cannot prove it.\n[Alice] Oh yes I can. In fact, I can tell you with the utmost certainty that in the last game you lied to me at least *** times.\n\n\n\nSo, how many times at least did Johnny lie to Alice? Try to determine this, knowing only the hints Johnny gave to Alice.\n\n\nInput\nThe first line of input contains t, the number of test cases (about 20). Exactly t test cases follow. \n\nEach test case starts with a line containing a single integer k, denoting the number of hints given by Johnny (1 ≤ k ≤ 100000). Each of the next k lines contains exactly one hint. The i-th hint is of the form:\n\noperator li logical_value\n\nwhere operator denotes one of the symbols < , > , or ; li is an integer (1 ≤ li ≤ 10^9), while logical_value is one of the words: Yes or No. The hint is considered correct if logical_value is the correct reply to the question: \"Does the relation: n operator li hold?\", and is considered to be false (a lie) otherwise.\n\n\nOutput\nFor each test case output a line containing a single integer, equal to the minimal possible number of Johnny's lies during the game.\n\n\nExample\n\nInput:\n3\n2\n< 100 No\n> 100 No\n3\n< 2 Yes\n> 4 Yes\n= 3 No\n6\n< 2 Yes\n> 1 Yes\n= 1 Yes\n= 1 Yes\n> 1 Yes\n= 1 Yes\n\nOutput:\n0\n1\n2\n\nExplanation: for the respective test cases, the number picked by Johnny could have been e.g. nnn", "id": 0, "labels": "{\"difficulty\":\"MEDIUM\", \"name\":\"a3\", \"source\":\"CODECHEF\"}", "test": "[{\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 6 No\\n3\\n< 2 seY\\n> 1 Yes\\n= 1 Yes\\n= 2 Yds\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n= 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n> 100 No\\n3\\n= 2 Yes\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Zes\\n> 1 Yes\\n= 1 seY\\n< 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 nN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 seY\\n= 1 eXs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n@ 100 No\\n3\\n< 2 Yes\\n= 4 Yes\\n= 3 oN\\n6\\n< 1 Yes\\n> 1 Yes\\n< 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n4\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 6 No\\n3\\n< 2 seY\\n> 1 Yes\\n= 1 Yes\\n= 2 Yds\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 101 oN\\n3\\n< 2 Yfs\\n> 4 Yes\\n= 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yse\"}, \"output\":{\"stdout\":\"0\\n0\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 1 Yes\\n> 1 Yes\\n> 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 Np\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yfs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 oN\\n3\\n< 2 seY\\n> 1 Yes\\n= 2 sYe\\n> 2 Yes\\n= 1 Yfs\\n> 1 Xes\"}, \"output\":{\"stdout\":\"0\\n0\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n< 6 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Ysf\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 teY\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n< 3 No\\n6\\n< 2 Yes\\n= 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 seY\\n= 1 eXs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 101 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 2 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n= 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Xes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yse\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yet\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n= 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 6 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 2 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n< 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yet\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n> 2 Yes\\n= 1 Yfs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 seY\\n> 1 Yes\\n= 2 sYe\\n> 2 Yes\\n= 1 Yfs\\n> 1 Xes\"}, \"output\":{\"stdout\":\"0\\n0\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n4\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n= 4 Yes\\n= 6 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 2 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 eXs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yfs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n= 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 seY\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 101 oN\\n> 100 No\\n3\\n< 1 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Zes\\n= 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 2 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 101 No\\n3\\n< 2 Yfs\\n> 4 Yes\\n= 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yse\"}, \"output\":{\"stdout\":\"0\\n0\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n< 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 101 oN\\n> 100 No\\n3\\n< 1 Yes\\n> 4 Yes\\n= 3 oO\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 seY\\n> 1 Yes\\n= 1 sYe\\n> 2 Yes\\n= 1 Yfs\\n> 1 Xes\"}, \"output\":{\"stdout\":\"0\\n0\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 101 oN\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 oN\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n= 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 2 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n= 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n> 100 No\\n3\\n= 2 seY\\n? 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n? 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yds\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 111 oN\\n> 100 No\\n3\\n< 1 Yes\\n> 4 Yes\\n= 3 oO\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yfs\\n> 4 Yes\\n= 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yse\"}, \"output\":{\"stdout\":\"0\\n0\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n@ 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Zes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n= 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Zes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Xes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yse\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 teY\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 seY\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 teY\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 101 oN\\n3\\n< 2 sfY\\n> 4 Yes\\n= 3 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yse\"}, \"output\":{\"stdout\":\"0\\n0\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 sYe\\n> 2 Yes\\n= 1 Yfs\\n> 1 Xes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n< 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Zes\\n> 1 Yes\\n= 1 seY\\n< 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"1\\n0\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 6 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yds\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 2 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 reY\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 pN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yet\\n> 1 Yes\\n> 4 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 oN\\n3\\n< 2 seY\\n> 1 Yes\\n= 2 sYe\\n> 2 Yes\\n= 2 Yfs\\n> 1 Xes\"}, \"output\":{\"stdout\":\"0\\n0\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 110 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n; 6 No\\n6\\n< 2 Yes\\n= 1 Yes\\n< 1 Yds\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"1\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n? 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n= 4 Yes\\n= 3 No\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n4\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n> 2 Yes\\n= 1 Yfs\\n> 1 Xes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n? 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 1 nN\\n6\\n< 1 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yse\"}, \"output\":{\"stdout\":\"0\\n1\\n3\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yes\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 2 Yes\\n= 6 No\\n3\\n< 2 seY\\n> 1 Yes\\n= 1 Yes\\n= 2 Yds\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yet\\n> 4 Yes\\n= 3 pN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yet\\n> 1 Yes\\n> 4 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 pN\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Zes\\n= 2 Yet\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n@ 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 oN\\n6\\n< 1 Yes\\n> 1 Yes\\n< 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n4\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yet\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yfs\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 6 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n< 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n? 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yds\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n@ 100 No\\n3\\n< 2 Yds\\n> 4 Yes\\n= 3 oN\\n6\\n< 1 Yes\\n> 1 Yes\\n< 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n4\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 1 Yes\\n> 2 Yes\\n= 6 No\\n3\\n< 2 seY\\n> 1 Yes\\n= 1 Yes\\n= 2 Yds\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n= 2 seY\\n> 4 Yes\\n= 3 No\\n3\\n< 2 Yes\\n> 1 Yes\\n= 1 seY\\n= 2 Yes\\n= 1 Yes\\n> 1 Yes\"}, \"output\":{\"stdout\":\"0\\n0\\n1\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 101 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 seY\\n> 1 Yes\\n= 1 Zes\\n= 2 Yft\\n> 1 Yes\\n> 2 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n0\\n\"}}, {\"input\":{\"stdin\":\"3\\n2\\n< 100 No\\n> 100 No\\n3\\n< 2 Yes\\n> 4 Yes\\n= 3 No\\n6\\n< 2 Yes\\n> 1 Yes\\n= 1 Yes\\n= 1 Yes\\n> 1 Yes\\n= 1 Yes\"}, \"output\":{\"stdout\":\"0\\n1\\n2\"}}]", "__internal_uuid__": "73a97724-9558-4a4b-8e39-df68053e95b8", "canonical_solution": {"python": "import sys\n\ndef solve():\n    input_data = sys.stdin.read().strip().split()\n    t = int(input_data[0])\n    idx_data = 1\n    \n    # We'll define a helper function to add coverage of [start, end]\n    # into a difference array \"events\" structure, *if* start <= end and both are in [1, 10^9+1].\n    def add_interval(events, start, end):\n        # We will clamp start/end to [1, 10^9+1] to handle out-of-range\n        # because no valid n < 1 or > 10^9.\n        # For difference-array logic, we\u2019ll do: coverage[start] += 1, coverage[end+1] -= 1 \n        # if 1 <= start <= end <= 10^9, but we store \"end+1\" as an event if end+1 <= 10^9+1.\n        # Then we'll coordinate-compress these points later.\n        \n        lo = max(1, start)\n        hi = min(10**9, end)\n        if lo <= hi:\n            # +1 at lo\n            events.append((lo, +1))\n            # -1 at hi+1 if hi+1 <= 10^9+1\n            if hi+1 <= 10**9+1:\n                events.append((hi+1, -1))\n    \n    results = []\n    \n    for _ in range(t):\n        k = int(input_data[idx_data]); idx_data += 1\n        \n        # We'll gather \"events\" for a difference array, plus all coordinates we see.\n        events = []  # Will hold tuples (coordinate, delta)\n        \n        for _hint in range(k):\n            op = input_data[idx_data]       # <, >, or =\n            L_str = input_data[idx_data+1]  # integer L\n            val = input_data[idx_data+2]    # Yes or No\n            idx_data += 3\n            \n            L = int(L_str)\n            \n            if op == '<':\n                # \"n < L\"\n                if val == 'Yes':\n                    # coverage = {n | n < L}  intersect [1..10^9]\n                    # => interval [1, L-1]\n                    add_interval(events, 1, L-1)\n                else:\n                    # val == 'No'\n                    # coverage = {n | not (n < L)} = {n | n >= L} intersect [1..10^9]\n                    # => interval [L, 10^9]\n                    add_interval(events, L, 10**9)\n            \n            elif op == '>':\n                # \"n > L\"\n                if val == 'Yes':\n                    # coverage = {n | n > L} => [L+1, 10^9]\n                    add_interval(events, L+1, 10**9)\n                else:\n                    # val == 'No'\n                    # coverage = {n | n <= L} => [1, L]\n                    add_interval(events, 1, L)\n            \n            else:\n                # op == '='\n                # \"n = L\"\n                if val == 'Yes':\n                    # coverage = {L}\n                    # We'll treat that as [L,L] in the difference array\n                    add_interval(events, L, L)\n                else:\n                    # val == 'No'\n                    # coverage = [1,10^9] \\ {L}\n                    # We can add the entire [1,10^9], then subtract point L.\n                    # Entire range:\n                    add_interval(events, 1, 10**9)\n                    # Now remove L from coverage => effectively coverage at L goes down by 1\n                    # That is: -1 at L, +1 at L+1 in the difference array\n                    # We'll just add these as \u201cevents\u201d.\n                    # But only if 1 <= L <= 10^9, which it always is per the problem statement.\n                    if 1 <= L <= 10**9:\n                        events.append((L, -1))\n                        if L+1 <= 10**9+1:\n                            events.append((L+1, +1))\n        \n        # If there are no hints (k=0, theoretically?), the coverage would be 0 events => \n        # but the problem states k >= 1. We'll proceed as normal.\n        \n        # Now we do coordinate compression:\n        # 1) Collect all coordinates from events\n        coords = [p for (p, _) in events]\n        if not coords:\n            # no hints or intervals ended up in range (rare edge case if everything was out of [1,10^9]),\n            # then coverage is 0 for all n => we can\u2019t satisfy any hints => each hint must be a lie\n            # or possibly 0-lies if all hints were contradictory out-of-range. \n            # But typically you'd get coverage=0 => best coverage is 0 => min lies = k.\n            results.append(k)\n            continue\n        \n        coords = list(set(coords))  # unique\n        coords.sort()\n        \n        # Build a map from coordinate to compressed index\n        comp_idx = {}\n        for i, c in enumerate(coords):\n            comp_idx[c] = i\n        \n        # Build the difference array in compressed space\n        diff = [0]*(len(coords)+1)\n        for (p, d) in events:\n            i = comp_idx[p]\n            diff[i] += d\n        \n        # Prefix sum over diff\n        coverage = [0]*(len(coords)+1)\n        coverage[0] = diff[0]\n        for i in range(1, len(coords)):\n            coverage[i] = coverage[i-1] + diff[i]\n        \n        # coverage[i] now is \u201ccoverage count\u201d at coords[i], valid from coords[i] \n        # up to (but not including) the next coordinate in the compressed list, if any.\n        #\n        # We must find the maximum coverage in the range [1..10^9].\n        # The \"region\" for coverage[i] is [ coords[i], coords[i+1] ) in original space.\n        # For i=0, the region is [ coords[0], coords[1] ), etc.\n        # If we go beyond coords[-1], coverage is not defined (the difference array might revert to 0).\n        \n        # We\u2019ll track the maximum coverage across all segments that intersect [1..10^9].\n        \n        max_cov = 0\n        \n        # Also handle coverage[0] which is valid in [ coords[0], coords[1] ), etc.\n        # We'll do a loop from i=0 to len(coords)-1 and examine the integer interval\n        # [coords[i], coords[i+1]-1] in the original number line. \n        # The coverage is coverage[i]. \n        # Also handle the last coordinate \u201ccoords[-1]\u201d up to 10^9 possibly.\n        \n        n_coords = len(coords)\n        for i in range(n_coords):\n            c1 = coords[i]\n            cov = coverage[i]\n            \n            # Next boundary might exist; if i == n_coords-1, there's no next boundary in coords\n            if i < n_coords - 1:\n                c2 = coords[i+1] - 1  # inclusive\n            else:\n                c2 = 10**9  # might go up to 10^9 if we have coverage.\n            \n            # Now we intersect [c1..c2] with [1..10^9].\n            start = max(1, c1)\n            end   = min(10**9, c2)\n            if start <= end:\n                # coverage is 'cov' throughout [start..end]\n                if cov > max_cov:\n                    max_cov = cov\n        \n        # The maximum coverage found is max_cov. The minimal lies is k - max_cov.\n        ans = k - max_cov\n        results.append(ans)\n    \n    print('\n'.join(map(str, results)))\n\n\n# If you want to run this in an online judge or local environment,\n# just ensure to call solve() at the end:\nif __name__ == \"__main__\":\n    solve()\n"}}
